# Introduction
Welcome to our presentation! We chose to develop a Mario-style platformer as our project because we had inspired by Nintendo game called Super Mario Bros. Today we will tell you how we developed a game using the CDM-16 processor and Logisim.


# What is our game?

 • We created a simple platform game that, like an original game, has basic mechanics like moving around the map, jumping, killing enemies.
 • The game character travels around the map avoiding obstacles such as stairs,  and encounters ground and flying enemies along the way.
 • The player gets points for living and killing enemies.


# Goals and Objectives
 • Learn how to work in a team.
 • Develop an assembler program with implemented game logic.
 • Design a functional circuit in Logisim to display the game in a matrix.
 • Merge the assembler and Logisim parts.
 • Debug and test the program to avoid bugs and improve the stability of the game.



# Structure of cdm-16

In our project, there are 5 assembler files - main, map, enemy, mario, trigger - each with their own functions. The main function forms the base, within which we initialize the map using the set_up function, then we place enemies using the set_coordinates function and place Mario; after this, the game logic loop begins. To start, we increase the score for the player being alive using inc_points. After that, we move the ground enemy towards Mario, using the subroutines check_map_left(right) to ensure the enemy doesn't fall off the platform, and check_pixel to ensure the enemy stands on the platform.

We also move the flying enemy towards Mario, and when it is directly above, it drops down on the player, checking whether the enemy has landed on the platformueiingccheckscykeenem_snndrkm p, and checkunndrkpyx lm.
TwhenwhemmoveMMari aaleed onpplaye  c i osm Tos d  tidsaecurlaetl,nwhecchec  taitMMari dbeisnbte x ittthem p,n tthewide,nwhepeeovnittthepplaye feormd iings .rIt MMari mmovs aeyoandhllt tthem p,nwhemmovetthem p  is lfnwhylhekdepynngMMari ionpplcd.rInecale mf   jump,nwhecchec wchtthe tthepplaye idsoontthegeouandoe aeppltfoam.rSiicvetthrheiisgeaoity iontthegame,nwheconiinuouspymdecrvale y.

Aftye all ttheaaoov,nwhecanechhec foe collisioos bhtwden tthepplaye aandenemi s.rInettheeovnt mf   collisioo,nwhecchec wchtthe tthepplaye idsfalliogdoe not; if tthepplaye idsfalliog,etthyrkill ttheenemy,notthewise,etthyrght killed.

At ttheend mf  ll ttis,nwherhfrhst tthescrden.



# Structurheof Logisim

In our prmjhet,nwheh vhearm inecircuit called m ineand 8esub-schemed:

6eschemed foe rendeeiogdsprited:
-esupye_muxeand sprite foe rendeeiogdhthmm inhtho'edssprit

-esupye_mu2s,ssupye_mu3s,aand sprit2s,spprit3e foe rendeeiogdhtheIeiime.mWrhuie-esupye_muxt  ndtdem iegdhthsupc f cneoau ntiinwcisc t  nrmwne saot8o  dhth3u3 dsprit.:
Aandtwohmo r dchtmted:
-eco rbfaydx-ne schtmt dhat8desslmyedththplmyeh'edsco r ontththsc rea.,It8i_paemtnisgdhthconvdesrontfpoi htxmdpc mmlxt  ndc mmlxnu bpyiig-eyittm.:
-ccipx-nththmost8i_pootani dub-dchtmt,trteponsibae  or  rndpriig-evdeydhiig-ontththsc rea ii e sppc fechcolu n ofnththmadrex located ii mmia.
:Ththmaintschtmt,troughly sppakiig, esse blte mllgdhthcomponenis. Intpmrticulay,nththCDM
16tprocessoy,nwcicc providte connpctivity ofnLogisimttotththasse bltr  ilte. It mlsotcontmiasnththmadrex totwcicc ththch pe mrthconnpcted btlow.
:Now wenwillgdtmoastrate dhthgamtplay ofnththgamt.
:

# Gamtplay ovtrview
vidto.mp4
:

# Conclusion
It was a difficulthchallenge dohmake dhisngamt ia Asse bltr andtLogisi , but it mllows usnto dhink morthdteply andtptrhmpe crtate it oa ththcoatroller.